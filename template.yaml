AWSTemplateFormatVersion: 2010-09-09
Description: >-
  The Better Store Order API

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: prod

  InfraBaseCFName:
    Type: String

  SecKmsKeysCFName:
    Type: String
    Default: tbs-sec-kms-prod

  VpcCFStackName:
    Type: String

  OrderCFStackName:
    Type: String
    Default: tbs-app-order-prod

  UpsertOrderReservedConcurrency:
    Type: String
    Default: 2

  AppLoggingLevel:
    Type: String
    AllowedValues: [TRACE, DEBUG, INFO, WARN, ERROR, FATAL]
    Default: INFO

  SystemLogLevel:
    Type: String
    AllowedValues: [DEBUG, INFO, WARN]
    Default: INFO

  RdsDbSnapshotId:
    Type: String
    Default: ""

Conditions:
  UseRdsDbSnapshot: !Not [!Equals [!Ref RdsDbSnapshotId, ""]]

Resources:

  RdsDbSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-RdsDbSecret'
      Description: 'Master credentials for reports database'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "dbadmin"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      KmsKeyId:
        Fn::ImportValue: !Sub ${SecKmsKeysCFName}:InternalKmsKey:Id

  RdsDbSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Access from From VPC"
      VpcId:
        Fn::ImportValue: !Sub ${VpcCFStackName}:VPC:Id
      SecurityGroupIngress:
        -
          CidrIp:
            Fn::ImportValue: !Sub ${VpcCFStackName}:VPC:Cidr
          Description: "Allow traffic from inside VPC only"
          FromPort: '3306'
          IpProtocol: tcp
          ToPort: '3306'
#      SecurityGroupEgress:
#        -
#          CidrIp: "0.0.0.0/0"
#          Description: "Allow all external traffic e.g. for updates"
#          FromPort: '443'
#          IpProtocol: tcp
#          ToPort: '443'

  RdsDbCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      BackupRetentionPeriod: 1
      ClusterScalabilityType: standard
      CopyTagsToSnapshot: true
      DatabaseName: reports
      #DBClusterParameterGroupName: String
      #DBInstanceParameterGroupName: String
      DBSubnetGroupName: !Ref RdsDbSubnetGroup
      DeletionProtection: false
      EnableCloudwatchLogsExports:
        - postgresql
      # EnableGlobalWriteForwarding: Boolean
      EnableHttpEndpoint: false
      EnableIAMDatabaseAuthentication: false
      EnableLocalWriteForwarding: false
      Engine: aurora-postgresql
      EngineLifecycleSupport: open-source-rds-extended-support
      EngineMode: provisioned
      EngineVersion: "16.6"
      # GlobalClusterIdentifier: String
      KmsKeyId:
        Fn::ImportValue: !Sub ${SecKmsKeysCFName}:InternalKmsKey:Id
      MasterUsername: !If [ UseRdsDbSnapshot, !Ref "AWS::NoValue", !Join [ '', [ '{{resolve:secretsmanager:',
                                                                                 !Ref RdsDbSecret, ':SecretString:username}}' ] ] ]
      MasterUserPassword: !If [ UseRdsDbSnapshot, !Ref "AWS::NoValue", !Join [ '', [ '{{resolve:secretsmanager:',
                                                                                     !Ref RdsDbSecret, ':SecretString:password}}' ] ] ]
      MonitoringInterval: 0
      # MonitoringRoleArn: String
      NetworkType: IPV4
      PerformanceInsightsEnabled: false
      Port: 5432
      #      ReadEndpoint:
      #        ReadEndpoint
      # RestoreToTime: String
      # RestoreType: String
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0
        MaxCapacity: 1
        SecondsUntilAutoPause: 300
      SnapshotIdentifier: !If [UseRdsDbSnapshot, !Ref RdsDbSnapshotId, !Ref "AWS::NoValue"]
      StorageEncrypted: true
      StorageType: aurora
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RdsDbCluster
      UseLatestRestorableTime: true
      VpcSecurityGroupIds:
        - !Ref RdsDbSecurityGroup

  DefaultRdsDbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref RdsDbCluster
      MonitoringInterval: 0


  RdsDbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub ${AWS::StackName}-OrderRdsDbSubnetGroup
      SubnetIds:
        - Fn::ImportValue: !Sub ${VpcCFStackName}:DbPrivateSubnetA:Id
        - Fn::ImportValue: !Sub ${VpcCFStackName}:DbPrivateSubnetB:Id
        - Fn::ImportValue: !Sub ${VpcCFStackName}:DbPrivateSubnetC:Id
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-OrderRdsDbSubnetGroup

#  RdsRoute53Record:
#    Type: AWS::Route53::RecordSet
#    Properties:
#      Comment: !Sub "${AWS::StackName}-OrderRdsRoute53Record"
#      HostedZoneId:
#        Fn::ImportValue: !Sub ${InfraBaseCFName}:HostedZone:Id
#      Name:
#        Fn::Join:
#          - "."
#          - - reportsdb
#            - Fn::ImportValue: !Sub ${InfraBaseCFName}:HostedZone:DomainName
#      Type: CNAME
#      TTL: '60'
#      ResourceRecords:
#        - !GetAtt RdsDbCluster.Endpoint.Address

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-LambdaPolicies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ssm:GetParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}*"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt UserOrderUpsertedFunctionDLQ.Arn
              - Effect: Allow
                Action: kms:Decrypt
                Resource:
                  Fn::ImportValue: !Sub ${SecKmsKeysCFName}:InternalKmsKey:Arn
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref RdsDbSecret

  LambdaVpcSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Access from FromVPC"
      VpcId:
        Fn::ImportValue: !Sub ${VpcCFStackName}:VPC:Id
      SecurityGroupEgress:
        -
          CidrIp: "0.0.0.0/0"
          Description: "Allow all external traffic e.g. for calling AW services"
          FromPort: '443'
          IpProtocol: tcp
          ToPort: '443'

  UserOrderUpsertedRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Subscribe to Order update events and process for reporting
      EventBusName:
        Fn::ImportValue: !Sub ${InfraBaseCFName}:TbsEventBus:Name
      EventPattern:
        source:
          - !Sub ${OrderCFStackName}-DynamoDbStreamEventPipe
        detail-type:
          - OrderEvent
      State: ENABLED
      Targets:
        - Id: UserOrderUpsertedEventQueue
          Arn: !GetAtt UpsertOrderFunction.Arn
          RetryPolicy:
            MaximumRetryAttempts: 0

  UpsertOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: index.handler
      Runtime: nodejs22.x
      MemorySize: 512
      Timeout: 10
      AutoPublishAlias: prod
      Description: Upsert order function
      Tracing: Active
      DeadLetterQueue:
        TargetArn: !GetAtt UserOrderUpsertedFunctionDLQ.Arn
        Type: SQS
      DeploymentPreference:
        Type: AllAtOnce
      ReservedConcurrentExecutions: !Sub ${UpsertOrderReservedConcurrency}
      LoggingConfig:
        LogGroup: !Ref UpsertOrderFunctionLogs
        LogFormat: JSON
        ApplicationLogLevel: !Ref AppLoggingLevel
        SystemLogLevel: !Ref SystemLogLevel
      Environment:
        Variables:
          REPORTS_DB_SECRET: !Ref RdsDbSecret
          REPORTS_DB_HOSTNAME:
            Fn::Join:
              - "."
              - - reportsdb
                - Fn::ImportValue: !Sub ${InfraBaseCFName}:HostedZone:DomainName
          REPORTS_DB_NAME: reports
          REPORTS_DB_COMNNECTION_LIMIT: 10
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaVpcSG
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcCFStackName}:AppPrivateSubnetA:Id
          - Fn::ImportValue: !Sub ${VpcCFStackName}:AppPrivateSubnetB:Id
          - Fn::ImportValue: !Sub ${VpcCFStackName}:AppPrivateSubnetC:Id
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/application/event-handlers/upsert-order/index.ts

  UpsertOrderFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-UpsertOrderFunction"
      RetentionInDays: 365

  # An SQS reource policy is required for events to publish to queue
  UserOrderUpsertedEventLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpsertOrderFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt UserOrderUpsertedRule.Arn

  UserOrderUpsertedFunctionDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-UserOrderUpsertedFunctionDLQ"

Outputs:

  UserOrderUpsertedFunctionDLQName:
    Description: Queue Name
    Value: !GetAtt UserOrderUpsertedFunctionDLQ.QueueName
    Export:
      Name: !Sub '${AWS::StackName}:UserOrderUpsertedEventDLQ:Name'

  UserOrderUpsertedEventDLQArn:
    Description: Queue Arn
    Value: !GetAtt UserOrderUpsertedFunctionDLQ.Arn
    Export:
      Name: !Sub '${AWS::StackName}:UserOrderUpsertedEventDLQ:Arn'

  UserOrderUpsertedEventDLQUrl:
    Description: Queue Url
    Value: !Ref UserOrderUpsertedFunctionDLQ
    Export:
      Name: !Sub '${AWS::StackName}:UserOrderUpsertedEventDLQ:Url'